# 입력 읽기
n = int(input().strip())

# 첫째 줄에 수행 횟수 출력 (항상 1회)
print(1)

# 둘째 줄에 최고차항의 차수 출력 (항상 0차)
print(0)
"""
1. MenOfPassion 알고리즘에서 ⌊n / 2⌋ 연산을 통해 배열 A의 한 요소에 접근하는 코드 return A[i];는 입력 크기 n과 무관하게 항상 한 번 실행됩니다. 
2. ⌊n / 2⌋ 연산은 상수 시간 연산입니다. 다항식으로 나타내면 최고차항의 차수가 0입니다. 따라서, 둘째 줄에 출력할 값은 0입니다.
"""




# 입력 읽기
n = int(input().strip())

# 첫째 줄에 수행 횟수 출력
print(n)

# 둘째 줄에 최고차항의 차수 출력
print(1)
"""
1. sum <- sum + A[i];는 반복문이 한 번 실행될 때마다 수행되고, 반복문은 1부터 n까지 실행되므로 이 코드의 수행 횟수는 n입니다.
2. 수행 횟수는 n에 비례하므로, 다항식으로 나타내었을 때 최고차항의 차수는 1입니다.
"""




# 입력 읽기
n = int(input().strip())

# 첫째 줄에 수행 횟수 출력
print(n * n)

# 둘째 줄에 최고차항의 차수 출력
print(2)
"""
1. MenOfPassion 알고리즘의 sum <- sum + A[i] × A[j];는 이중 반복문이 각각 n번 실행되므로, 총 수행 횟수는 n^2.
2. 수행 횟수는 n^2에 비례하므로 다항식의 최고차항의 차수는 2입니다. 따라서 둘째 줄에 2를 출력합니다.
"""




# 입력 읽기
n = int(input().strip())

# 첫째 줄에 수행 횟수 출력
# 수행 횟수는 n * (n - 1) // 2로 계산
performances = n * (n - 1) // 2
print(performances)

# 둘째 줄에 최고차항의 차수 출력
print(2)
"""
    for i <- 1 to n - 1
        for j <- i + 1 to n
            sum <- sum + A[i] × A[j]; # 코드1
"""




# 입력 읽기
n = int(input().strip())

# 첫째 줄에 수행 횟수 출력
# 수행 횟수는 n * (n - 1) * (n - 2) // 6로 계산
performances = n * (n - 1) * (n - 2) // 6
print(performances)

# 둘째 줄에 최고차항의 차수 출력
print(3)
"""
    sum <- 0;
    for i <- 1 to n - 2
        for j <- i + 1 to n - 1
            for k <- j + 1 to n
                sum <- sum + A[i] × A[j] × A[k]; # 코드1
>>>
바깥쪽 반복문은 i가 1부터 n-2까지 실행됩니다.
중간 반복문은 j가 i+1부터 n-1까지 실행됩니다.
안쪽 반복문은 k가 j+1부터 n까지 실행됩니다.
"""




# 입력 읽기
a1, a0 = map(int, input().strip().split())
c = int(input().strip())
n0 = int(input().strip())

# 조건 확인
# c >= a1 이고 a0 <= (c - a1) * n이 n >= n0에 대해 항상 성립해야 함
if c >= a1 and a0 <= (c - a1) * n0:
    print(1)
else:
    print(0)
"""
예제 입력 2
7 7
8
10

예제 출력 2
1

f(n) = 7*n + 7, g(n) = n, c = 8, n0 = 10이다. 모든 n ≥ 10에 대하여 7*n + 7 ≤ 8*n 이므로 O(n) 정의를 만족한다.
"""




# 입력 읽기
import sys
input = sys.stdin.read
data = input().strip().split()

N = int(data[0])
M = int(data[1])
cards = list(map(int, data[2:]))

# 가능한 최대 합 초기화
max_sum = 0

# 3장의 카드를 선택하는 모든 조합 탐색
for i in range(N):
    for j in range(i + 1, N):
        for k in range(j + 1, N):
            current_sum = cards[i] + cards[j] + cards[k]
            if current_sum <= M:
                max_sum = max(max_sum, current_sum)

# 결과 출력
print(max_sum)
"""
1. sys.stdin.read를 사용하여 입력을 한 번에 읽고, 필요한 값들을 추출합니다.
N과 M을 첫 번째와 두 번째 값으로 설정하고, 나머지 값을 카드의 리스트로 변환합니다.
2. 세 중첩 반복문을 사용하여 가능한 모든 3장의 카드 조합을 탐색합니다.
각 조합의 합을 계산하고, 합이 𝑀을 넘지 않으면 최대 합을 갱신합니다. (조건문 하에!!!!)
3. 이 방법은 최대 100개의 카드에 대해 삼중 반복문을 사용하므로, 최대 반복 횟수는 
100×99×98≈1,000,000으로 제한된 시간 내에 충분히 처리할 수 있습니다.
"""




# 최소 생성자 탐색
# 분해합 계산 함수
def decompose_sum(n):
    return n + sum(map(int, str(n)))

# 입력 읽기
N = int(input().strip())

# 생성자 찾기
result = 0
for i in range(max(1, N - 54), N):
    if decompose_sum(i) == N:
        result = i
        break

# 결과 출력
print(result)
"""
1. str(n) 함수는 숫자 n을 문자열로 변환합니다. 예를 들어, n = 196이면, str(196)은 "196"이 됩니다.
이를 map(int, str(n))와 함께 사용하면, 문자열 "196"의 각 문자 '1', '9', '6'을 개별 숫자 1, 9, 6으로 변환하여 리스트 형태로 처리할 수 있습니다. 
최종적으로 sum(map(int, str(n)))는 각 자리 숫자의 합을 구하게 됩니다.
2. break는 for문을 즉시 종료시키는 역할을 합니다.
오름차순으로 탐색하면서 생성자를 찾으면, 해당 생성자가 가장 작은 값이 됩니다.
생성자를 1개라도 찾으면 더 이상 반복할 필요가 없으므로 break를 사용하여 for문을 종료합니다.
"""
