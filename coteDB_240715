import sys
from collections import Counter

input = sys.stdin.read

def main():
    # 입력값을 처리합니다.
    data = input().split()
    N = int(data[0])
    M = int(data[1])
    words = data[2:]
    
    # 길이가 M 이상인 단어만 필터링합니다.
    filtered_words = [word for word in words if len(word) >= M]

    # 단어의 빈도를 계산합니다.
    word_count = Counter(filtered_words)

    # 단어를 정렬합니다.
    # 1. 빈도수가 높은 순서대로
    # 2. 길이가 긴 순서대로
    # 3. 알파벳 사전 순서대로
    sorted_words = sorted(word_count.keys(), key=lambda x: (-word_count[x], -len(x), x))

    # 결과를 출력합니다.
    for word in sorted_words:
        print(word)

if __name__ == "__main__":
    main()

"""
filtered_words = ['apple', 'sand', 'apple', 'append', 'sand', 'sand']
word_count = Counter({'sand': 3, 'apple': 2, 'append': 1})

- 기본적으로 sorted 함수는 오름차순 정렬을 수행하므로, - 부호를 붙여서 빈도가 높은 단어가 먼저 오도록 합니다.
- input() 함수를 여러 번 호출하는 것보다 sys.stdin.read로 한 번에 입력을 읽는 것이 더 효율적입니다. 이는 특히 큰 입력을 처리할 때 유리합니다.
"""





def factorial(n):
    if n == 0 or n == 1:  # 기저 사례: 0! = 1, 1! = 1
        return 1
    else:
        return n * factorial(n - 1)  # 재귀 호출로 팩토리얼 계산

# 입력을 받습니다.
n = int(input().strip())

# 결과를 출력합니다.
print(factorial(n))





def fibonacci(n):
    if n == 0:  # 기저 사례: 0번째 피보나치 수는 0
        return 0
    elif n == 1:  # 기저 사례: 1번째 피보나치 수는 1
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)  # 재귀 호출로 피보나치 수 계산

# 입력을 받습니다.
n = int(input().strip())

# 결과를 출력합니다.
print(fibonacci(n))





def recursion(s, l, r):
    global count
    count += 1
    if l >= r:
        return 1
    elif s[l] != s[r]:
        return 0
    else:
        return recursion(s, l + 1, r - 1)

def isPalindrome(s):
    global count
    count = 0
    result = recursion(s, 0, len(s) - 1)
    return result, count

# 입력을 받습니다.
T = int(input().strip())
strings = [input().strip() for _ in range(T)]

# 각 테스트 케이스에 대해 결과를 출력합니다.
for s in strings:
    result, call_count = isPalindrome(s)
    print(result, call_count)

"""
count = 0  # 전역 변수 선언

def some_function():
    global count  # 전역 변수임을 명시적으로 선언
    count += 1  # 전역 변수의 값 변경

some_function()
print(count)  # 출력: 1
>>> 위와 같이 global count를 선언하지 않으면, count += 1은 로컬 변수를 참조하려고 시도하며, 만약 로컬 변수 count가 없다면 UnboundLocalError를 발생시킵니다.

초기 호출: recursion("ABCA", 0, 3)
l = 0, r = 3
s[0]은 "A"이고 s[3]도 "A"입니다. 두 문자가 같으므로 recursion("ABCA", 1, 2)를 호출합니다.

두 번째 호출: recursion("ABCA", 1, 2)
l = 1, r = 2
s[1]은 "B"이고 s[2]는 "C"입니다. 두 문자가 같지 않습니다.

elif s[l] != s[r]: 조건이 참이 되어 최종적으로 출력되는 값은 팰린드롬 여부인 0과 호출 횟수 2입니다..
"""





def merge_sort(A, p, r):
    if p < r:
        q = (p + r) // 2
        merge_sort(A, p, q)
        merge_sort(A, q + 1, r)
        merge(A, p, q, r)

def merge(A, p, q, r):
    global count, K, result
    i = p
    j = q + 1
    t = 0
    tmp = [0] * (r - p + 1)
    
    while i <= q and j <= r:
        if A[i] <= A[j]:
            tmp[t] = A[i]
            i += 1
        else:
            tmp[t] = A[j]
            j += 1
        t += 1
        count += 1
        if count == K:
            result = tmp[t-1]
    
    while i <= q:
        tmp[t] = A[i]
        i += 1
        t += 1
        count += 1
        if count == K:
            result = tmp[t-1]
    
    while j <= r:
        tmp[t] = A[j]
        j += 1
        t += 1
        count += 1
        if count == K:
            result = tmp[t-1]
    
    for t in range(r - p + 1):
        A[p + t] = tmp[t]        
        # 여기서는 count를 증가시키지 않습니다.
    """ if count == K:
            result = A[p + t]"""

# 입력을 받습니다.
N, K = map(int, input().split())
A = list(map(int, input().split()))

count = 0
result = -1
merge_sort(A, 0, N - 1)

# 결과를 출력합니다.
print(result)

"""
첫 번째 while 문은 두 부분 배열의 요소를 비교하여 작은 값부터 tmp 배열에 저장합니다. 두 배열 중 하나의 모든 요소가 처리되면 종료됩니다.
두/세 번째 while 문은 첫/두 번째 부분 배열에 남아 있는 요소를 tmp 배열에 저장합니다. 첫/두 번째 부분 배열에 아직 처리되지 않은 요소가 있을 때 실행됩니다.





def create_cantor_set(n):
    if n == 0:
        return "-"
    else:
        prev = create_cantor_set(n - 1)
        return prev + " " * len(prev) + prev

def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    results = []
    for n in data:
        result = create_cantor_set(int(n))
        results.append(result)
    
    for res in results:
        print(res)

if __name__ == "__main__":
    main()

"""
코드를 간결하게 유지하면서도 안전성을 확보하기 위해 입력값 변환을 유지하는 것이 좋습니다.
"""





def draw_stars(n):
    if n == 1:
        return ["*"]

    stars = draw_stars(n // 3)
    L = []

    for i in stars:
        L.append(i * 3)
    for i in stars:
        L.append(i + " " * (n // 3) + i)
    for i in stars:
        L.append(i * 3)
    
    return L

def main():
    import sys
    input = sys.stdin.read
    N = int(input().strip())
    pattern = draw_stars(N)
    
    for line in pattern:
        print(line)

if __name__ == "__main__":
    main()
