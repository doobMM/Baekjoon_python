"""
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ 아래 문제 복습 요망!! ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
"""

def can_receive_snack(n, students):
    stack = []
    current_number = 1

    for student in students:
        while stack and stack[-1] == current_number:
            stack.pop()
            current_number += 1
        
        if student == current_number:
            current_number += 1
        else:
            stack.append(student)

    while stack and stack[-1] == current_number:
        stack.pop()
        current_number += 1

    return "Nice" if current_number == n + 1 else "Sad"

# 예제 입력
n = 5
students = [5, 4, 1, 3, 2]
result = can_receive_snack(n, students)
print(result)  # Nice

"""
1. 첫 번째 학생 번호: 5
현재 스택: []
current_number는 1
5는 current_number와 일치하지 않음.
5를 스택에 추가.
결과: 스택 [5], current_number 1

2. 두 번째 학생 번호: 4
현재 스택: [5]
current_number는 1
4는 current_number와 일치하지 않음.
4를 스택에 추가.
결과: 스택 [5, 4], current_number 1

3. 세 번째 학생 번호: 1
현재 스택: [5, 4]
current_number는 1
1은 current_number와 일치함.
current_number를 2로 증가.
결과: 스택 [5, 4], current_number 2

4. 네 번째 학생 번호: 3
현재 스택: [5, 4]
current_number는 2
3는 current_number와 일치하지 않음.
3를 스택에 추가.
결과: 스택 [5, 4, 3], current_number 2

5. 다섯 번째 학생 번호: 2
현재 스택: [5, 4, 3]
current_number는 2
2는 current_number와 일치함.
current_number를 3로 증가.
결과: 스택 [5, 4, 3], current_number 3

>>> 
(for문 안의 while문이 실행되는 예)
예제 0
학생 번호 : [3, 2, 1, 4]

예제 1
학생 번호: [4, 3, 2, 1]
1을 만나기 전 스택에 쌓인 4, 3, 2가 현재 필요한 번호와 일치하여 while문이 반복적으로 실행됩니다.

예제 2
학생 번호: [5, 1, 2, 3, 4]
1을 만나기 전 스택에 5가 쌓이지만 1부터 4까지가 연속적으로 맞춰지면서 while문이 실행됩니다.
"""




"""
1. 
  for i in range(2, int(100**0.5) + 1):  # range(2, 11)
    if is_prime[i]:
        for j in range(i * i, 101, i):
            is_prime[j] = False
i는 2부터 10까지 반복합니다.
i = 2일 때, j는 4, 6, 8, 10, ..., 100까지 반복하며 is_prime[j]를 False로 설정합니다.
i = 3일 때, j는 9, 12, 15, ..., 99까지 반복하며 is_prime[j]를 False로 설정합니다.
이 과정을 10까지 반복합니다.

2.
sieve_of_eratosthenes 함수 내에서 primes 리스트는 is_prime 리스트에서 True 값을 가지는 인덱스들만을 모아서 생성됩니다. 이러한 인덱스들이 실제 소수입니다.
enumerate(is_prime)는 is_prime 리스트의 인덱스와 값을 함께 순회합니다.

3. 두 소수의 합이 n이 되려면, 작은 소수 a의 범위를 n // 2까지로 제한할 수 있습니다. 그 이후의 경우는 앞에서 이미 계산한 경우의 중복이 됩니다.
"""

 def sieve_of_eratosthenes(max_num):
    is_prime = [True] * (max_num + 1)
    is_prime[0] = is_prime[1] = False

    for i in range(2, int(max_num**0.5) + 1):
        if is_prime[i]:
            for j in range(i * i, max_num + 1, i):
                is_prime[j] = False

    primes = [i for i, prime in enumerate(is_prime) if prime]
    return is_prime, primes

def count_goldbach_partitions(n, is_prime):
    count = 0
    for i in range(2, n // 2 + 1):
        if is_prime[i] and is_prime[n - i]:
            count += 1
    return count

  def main():
    import sys
    input = sys.stdin.read
    data = input().split()

    T = int(data[0])
    test_cases = [int(data[i]) for i in range(1, T + 1)]
    max_n = max(test_cases)

    is_prime, primes = sieve_of_eratosthenes(max_n)

    results = []
    for n in test_cases:
        results.append(count_goldbach_partitions(n, is_prime))

    for result in results:
        print(result)

if __name__ == "__main__":
    main()





import math

def count_open_windows(N):
    # N 이하의 완전 제곱수의 개수를 구함
    return int(math.isqrt(N))

def main():
    import sys
    input = sys.stdin.read
    N = int(input().strip())
    
    result = count_open_windows(N)
    print(result)

if __name__ == "__main__":
    main()

"""
각 창문은 그 창문 번호의 약수 개수만큼 열리고 닫힙니다. 예를 들어, 창문 번호가 12인 경우, 1, 2, 3, 4, 6, 12의 6개의 약수가 있으므로 6번 열리고 닫힙니다.
창문이 마지막에 열려있기 위해서는 홀수번 열리고 닫혀야 합니다. 약수의 개수가 홀수인 경우는 완전 제곱수인 경우에만 해당합니다. 
이 코드의 시간 복잡도는 O(1)이므로 매우 효율적입니다.
"""




  import sys

def main():
    input = sys.stdin.read
    data = input().split()
    
    N = int(data[0])
    commands = data[1:]
    
    stack = []
    index = 0
    results = []
    
    for _ in range(N):
        command = commands[index]
        if command == '1':
            X = int(commands[index + 1])
            stack.append(X)
            index += 2
        elif command == '2':
            if stack:
                results.append(stack.pop())
            else:
                results.append(-1)
            index += 1
        elif command == '3':
            results.append(len(stack))
            index += 1
        elif command == '4':
            if stack:
                results.append(0)
            else:
                results.append(1)
            index += 1
        elif command == '5':
            if stack:
                results.append(stack[-1])
            else:
                results.append(-1)
            index += 1
    
    for result in results:
        print(result)

if __name__ == "__main__":
    main()

"""
빈 리스트 stack을 스택으로 사용합니다.
파이썬에는 기본적으로 스택 자료 구조를 위한 전용 클래스가 없습니다. 대신, 리스트(list)를 사용하여 스택의 기능을 구현합니다. 
리스트는 스택의 기본 연산인 push와 pop을 지원합니다. push 연산은 리스트의 append 메서드로 구현되고, pop 연산은 리스트의 pop 메서드로 구현됩니다.
파이썬의 리스트를 사용하여 스택을 구현하는 방법이 일반적이지만, 명확한 스택 연산을 원한다면 위와 같은 전용 클래스를 구현할 수 있습니다.

stack.pop() 메서드는 스택의 가장 위에 있는 요소를 제거하고 그 값을 반환합니다. 따라서 이 반환된 값을 results.append()의 인수로 사용할 수 있습니다.
예를 들어, 스택이 [3, 5]인 상태에서 stack.pop()을 호출하면 스택은 [3]이 되고, 반환된 5가 results.append(5)로 처리됩니다.
"""





  def manage_money(K, numbers):
    stack = []

    for number in numbers:
        if number == 0:
            if stack:
                stack.pop()
        else:
            stack.append(number)
    
    return sum(stack)

# 입력 받기
import sys
input = sys.stdin.read
data = input().split()

K = int(data[0])
numbers = list(map(int, data[1:]))

# 결과 출력
result = manage_money(K, numbers)
print(result)

"""
  이 코드는 입력 크기가 최대 100,000까지 가능하므로, 효율적으로 작동할 수 있습니다.
입력
 정수가 "0"일 경우에 지울 수 있는 수가 있음을 보장할 수 있다
 첫 번째 줄에 정수 K가 주어진다. (1 ≤ K ≤ 100,000)
 이후 K개의 줄에 정수가 1개씩 주어진다. 정수는 0에서 1,000,000 사이의 값을 가지며, 정수가 "0" 일 경우에는 가장 최근에 쓴 수를 지우고, 아닐 경우 해당 수를 쓴다.

import sys

# 표준 입력에서 입력을 읽어오기
input_data = sys.stdin.read()

# 표준 출력에 출력하기
sys.stdout.write(input_data)
"""





  def is_vps(ps):
    stack = []
    for char in ps:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if stack:
                stack.pop()
            else:
                return "NO"
    if not stack:
        return "YES"
    else:
        return "NO"

def main():
    import sys
    input = sys.stdin.read
    data = input().split()

    T = int(data[0])
    test_cases = data[1:]

    results = []
    for i in range(T):
        result = is_vps(test_cases[i])
        results.append(result)

    for result in results:
        print(result)

if __name__ == "__main__":
    main()

"""
스택을 사용하여 여는 괄호 (를 저장하고, 닫는 괄호 )를 만날 때마다 스택에서 가장 최근의 여는 괄호를 제거합니다.

test_cases라는 list를 data란 list의 index=1부터의 자료로 갱신한다.
for문에서는 0부터 T-1까지 test_cases라는 list를 순회하므로 잘 작동한다.
"""




def is_balanced(string):
    stack = []
    for char in string:
        if char in "([":  # 여는 괄호를 만나면 스택에 추가
            stack.append(char)
        elif char == ')':  # 닫는 소괄호를 만나면
            if stack and stack[-1] == '(':
                stack.pop()  # 스택의 가장 최근 여는 소괄호와 짝을 이룸
            else:
                return "no"
        elif char == ']':  # 닫는 대괄호를 만나면
            if stack and stack[-1] == '[':
                stack.pop()  # 스택의 가장 최근 여는 대괄호와 짝을 이룸
            else:
                return "no"
    if not stack:
        return "yes"  # 모든 괄호가 짝을 이루면
    else:
        return "no"  # 스택에 여는 괄호가 남아 있으면

def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split('\n')

    results = []
    for line in data:
        if line == '.':
            break
        results.append(is_balanced(line))

    for result in results:
        print(result)

if __name__ == "__main__":
    main()

"""
첫번째 elif 안의 else에 해당되는 경우
1. 스택이 비어 있는 경우: 
  닫는 소괄호 )를 만났지만, 스택이 비어 있어 더 이상 짝을 맞출 여는 소괄호 (가 없는 경우입니다.
2. 스택의 마지막 요소가 여는 소괄호 (가 아닌 경우: 
  스택의 마지막 요소가 [인 경우입니다.

break 문은 현재 실행 중인 루프를 즉시 종료시킵니다. 따라서, break가 실행되면 해당 루프의 나머지 코드는 실행되지 않습니다.
results.append(is_balanced(line)):
line이 '.'가 아닌 경우, is_balanced(line) 함수를 호출하여 line의 균형을 확인하고, 그 결과를 results 리스트에 추가합니다.
"""






"""
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
"""
import sys
from collections import deque

input = sys.stdin.read
queue = deque()
commands = input().strip().split('\n')
n = int(commands[0])

output = []
for i in range(1, n + 1):
    command = commands[i]
    
    if command.startswith('push'):
        _, num = command.split()
        queue.append(int(num))
    elif command == 'pop':
        if queue:
            output.append(queue.popleft())
        else:
            output.append(-1)
    elif command == 'size':
        output.append(len(queue))
    elif command == 'empty':
        output.append(0 if queue else 1)
    elif command == 'front':
        if queue:
            output.append(queue[0])
        else:
            output.append(-1)
    elif command == 'back':
        if queue:
            output.append(queue[-1])
        else:
            output.append(-1)

sys.stdout.write('\n'.join(map(str, output)) + '\n')

"""
collections.deque는 양 끝에서 빠른 삽입과 삭제가 가능하여 큐 구현에 적합합니다.
sys.stdin.read를 사용하여 한 번에 모든 입력을 받아옵니다. 이는 입력이 많을 때 효율적입니다.

"""
