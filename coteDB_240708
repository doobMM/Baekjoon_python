def solve_linear_equations(a, b, c, d, e, f):
    denominator = a * e - b * d
    if denominator == 0:
        return None  # Shouldn't happen as per problem constraints
    
    x = (c * e - b * f) // denominator
    y = (a * f - c * d) // denominator
    
    return x, y

# Example usage:
a, b, c, d, e, f = map(int, input().split())
x, y = solve_linear_equations(a, b, c, d, e, f)
print(x, y)
"""
1. 먼저, 주어진 입력값을 받아옵니다.
2. 크래머의 공식에 따라 분모(denominator)를 계산합니다.
3. 𝑥와 𝑦를 크래머의 공식에 따라 계산합니다.
4. 계산된 𝑥 와 𝑦를 출력합니다.
"""




def count_repaints(board, x, y, pattern):
    count = 0
    for i in range(8):
        for j in range(8):
            if board[x + i][y + j] != pattern[i % 2][j % 2]:
                count += 1
    return count

def min_repaints(board, n, m):
    pattern1 = ['WBWBWBWB', 'BWBWBWBW']  # 시작이 W인 패턴
    pattern2 = ['BWBWBWBW', 'WBWBWBWB']  # 시작이 B인 패턴
    min_count = float('inf')
    
    for i in range(n - 7):
        for j in range(m - 7):
            count1 = count_repaints(board, i, j, pattern1)
            count2 = count_repaints(board, i, j, pattern2)
            min_count = min(min_count, count1, count2)
    
    return min_count

# 입력 받기
n, m = map(int, input().split())
board = [input().strip() for _ in range(n)]

# 결과 출력
print(min_repaints(board, n, m))
"""
count_repaints 함수는 8x8 크기의 부분 보드에서 체스판 패턴과 다른 칸의 개수를 계산하는 함수입니다.
주어진 시작 위치 (x, y)에서 8x8 크기의 부분 보드와 두 가지 체스판 패턴(패턴1과 패턴2)을 비교하여 다시 칠해야 하는 정사각형의 개수를 세어 반환합니다.

min_repaints 함수는 전체 보드에서 모든 가능한 8x8 크기의 부분 보드를 검사해야 합니다.
각 8x8 크기의 부분 보드에 대해 두 가지 체스판 패턴(패턴1과 패턴2)과 비교하여 다시 칠해야 하는 정사각형의 개수를 계산하기 위해 count_repaints 함수를 호출합니다.
min_repaints 함수에서 n과 m이 둘 다 8인 경우, for문에서 i와 j는 각각 한 번씩만 실행됩니다.
range(n - 7)와 range(m - 7)는 각각 range(1)과 같아서, i와 j는 각각 0만 가질 수 있습니다. 따라서 for문은 딱 한 번씩만 실행됩니다.

체스판에서는 인접한 칸이 서로 다른 색으로 칠해져야 합니다.
첫 번째 줄이 'WBWBWBWB'로 시작하면, 두 번째 줄은 반드시 서로 다른 색인 'BWBWBWBW'로 시작해야 합니다.
따라서, pattern1 리스트에는 번갈아 가며 색이 다른 두 줄의 패턴 'WBWBWBWB'와 'BWBWBWBW'가 포함되어 있습니다.
pattern[0][0]: W pattern[0][1]: B
pattern[1][0]: B pattern[1][1]: W
매번 모듈러 연산을 통해 접근하는 것보다 현재의 8x8 패턴을 유지하는 것이 더 직관적이고 명확합니다.
현재 pattern1의 형태가 코드의 가독성을 높이고, 체스판 패턴을 더 명확하게 나타내기 때문에 유지하는 것이 좋습니다.

 float('inf')는 모든 가능한 실제 값보다 큰 값으로 시작하여, 첫 번째 비교에서 계산된 값이 min_count로 설정될 수 있게 합니다.

 입력받는 과정에서 for문을 하나만 사용하고 range(n)을 통해 반복 횟수를 명시하는 이유는, 보드의 각 행을 한 줄씩 입력받기 때문입니다.
 각 줄은 이미 m개의 문자를 가지고 있으므로, 추가적인 for문을 사용할 필요가 없습니다.
 """




 def find_nth_end_number(n):
    count = 0
    number = 666
    
    while True:
        if '666' in str(number):
            count += 1
            if count == n:
                return number
        number += 1

# 입력 받기
n = int(input())
print(find_nth_end_number(n))
"""
1. 목표 설정: N번째로 작은 '666'이 포함된 숫자를 찾는 것입니다.

2. 숫자를 증가시키면서 검사 : 모든 숫자를 666부터 시작해서 하나씩 증가시키며 '666'이 포함된 숫자를 찾습니다.
 
 포함되지 않으면 다음 숫자로 number를 1 증가시켜 다음 숫자를 검사합니다.

3. '666'이 포함된 숫자를 찾는 방법: 현재 숫자에 '666'이 포함되어 있는지 확인해야 합니다.
숫자를 문자열로 변환하고, '666'이라는 패턴이 포함되어 있는지 검사하기 위해 위의 조건문을 사용합니다.

4. 찾은 숫자의 개수를 세기: '666'이 포함된 숫자를 찾을 때마다 count를 증가시킵니다.
count가 N과 같아지면, 원하는 결과를 얻은 것이므로 그 숫자를 반환합니다.

5. 반복문 종료 : 무한 루프를 사용하여 조건이 충족될 때까지 반복합니다.
count가 N과 같아지면 return number로 함수가 종료되므로, 별도의 break 문이 필요없습니다.
"""




def min_sugar_bags(N):
    for five_kg_bags in range(N // 5, -1, -1):
        remaining_weight = N - (five_kg_bags * 5)
        if remaining_weight % 3 == 0:
            three_kg_bags = remaining_weight // 3
            return five_kg_bags + three_kg_bags
    return -1

# 입력 받기
N = int(input())
print(min_sugar_bags(N))
"""
1. 반복문: for five_kg_bags in range(N // 5, -1, -1):
5킬로그램 봉지의 최대 개수부터 0까지 감소시키면서 반복합니다.

2. 남은 무게 계산: remaining_weight = N - (five_kg_bags * 5)
현재 5킬로그램 봉지 개수로 채우고 남은 무게를 계산합니다.

3. 3킬로그램 봉지로 채우기: if remaining_weight % 3 == 0:
남은 무게가 3킬로그램 봉지로 나누어 떨어지는지 확인합니다.
나누어 떨어지면, 해당 개수를 계산하고 총 봉지 개수를 반환합니다.

ex. 만약 min_sugar_bags 함수에 N의 값으로 11이 입력된다면, 첫 번째 for문은 2부터 0까지 총 3번 실행됩니다 :

첫 번째 반복 (five_kg_bags = 2):
remaining_weight = 11 - (2 * 5) = 11 - 10 = 1
remaining_weight % 3이 0이 아니므로, 다음 반복으로 넘어갑니다.

두 번째 반복 (five_kg_bags = 1):
remaining_weight = 11 - (1 * 5) = 11 - 5 = 6
remaining_weight % 3 == 0이므로, three_kg_bags = 6 // 3 = 2

five_kg_bags + three_kg_bags = 1 + 2 = 3
함수는 3을 반환하고 종료합니다.
"""





# 정렬
def sort_numbers():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    N = int(data[0])
    numbers = list(map(int, data[1:]))

    # 입력된 숫자의 개수가 N과 일치하는지 확인
    if len(numbers) != N:
        print("입력된 숫자의 개수가 N과 일치하지 않습니다.")
        return
    
    sorted_numbers = sorted(numbers)
    
    for num in sorted_numbers:
        print(num)

# 입력 받기
if __name__ == "__main__":
    sort_numbers()
"""
 마지막 입력 받는 부분에 있는 조건문 if __name__ == "__main__":는 Python 스크립트를 실행할 때와 다른 모듈에서 불러올 때의 동작을 구분하기 위한 관용적인 표현입니다.
 1. __name__ 변수:
Python에서 모든 스크립트 파일에는 __name__이라는 내장 변수가 있습니다.
스크립트가 직접 실행될 때, __name__ 변수의 값은 "__main__"이 됩니다.
만약 스크립트가 다른 모듈에서 불러와졌다면, __name__ 변수의 값은 해당 모듈의 이름이 됩니다.

 2. 조건문 if __name__ == "__main__"::
이 조건문은 스크립트가 직접 실행될 때만 코드 블록을 실행하게 합니다.
다른 모듈에서 이 스크립트를 불러올 때는 실행되지 않도록 합니다.

※ 스크립트가 직접 실행될 때 (python script.py와 같이):
__name__ 변수의 값은 "__main__"이 되고, 조건문 내부의 sort_numbers() 함수가 호출됩니다.

스크립트가 다른 모듈에서 불러와질 때:
__name__ 변수의 값은 모듈의 이름이 되며, 조건문 내부의 코드는 실행되지 않습니다.

[사용 이유]
모듈 재사용성: 스크립트를 모듈로서 재사용할 수 있도록 합니다. 예를 들어, 다른 스크립트에서 import script로 불러왔을 때, sort_numbers() 함수가 자동으로 실행되지 않도록 합니다.
테스트: 스크립트를 직접 실행하여 테스트할 수 있도록 합니다.

● 입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 절댓값이 1,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.
 Python의 sorted() 함수는 삽입 정렬이나 거품 정렬처럼 O(n²) 시간 복잡도를 가지지 않으며, 대신 O(n log n)의 시간 복잡도를 가집니다.
"""




def calculate_mean_and_median(numbers):
    # 평균 계산
    mean = sum(numbers) // len(numbers)
    
    # 중앙값 계산
    sorted_numbers = sorted(numbers)
    median = sorted_numbers[len(numbers) // 2]
    
    return mean, median

# 입력 받기
numbers = [int(input()) for _ in range(5)]

# 평균과 중앙값 계산
mean, median = calculate_mean_and_median(numbers)

# 결과 출력
print(mean)
print(median)

"""
1. 입력 받기:
다섯 개의 숫자를 입력받아 numbers 리스트에 저장합니다.
2. 평균 계산:
리스트의 합을 구하고, 리스트의 길이로 나누어 평균을 계산합니다. 문제에서 평균은 항상 자연수로 주어지므로, 정수 나눗셈을 사용합니다.
3. 중앙값 계산:
리스트를 오름차순으로 정렬한 후, 중앙에 위치한 값을 찾습니다. 다섯 개의 숫자이므로 중앙값은 항상 세 번째 숫자가 됩니다.
"""





def find_cutoff_score(N, k, scores):
    # 점수를 내림차순으로 정렬
    sorted_scores = sorted(scores, reverse=True)
    # 커트라인 점수는 상을 받는 사람들 중 가장 낮은 점수
    cutoff_score = sorted_scores[k - 1]
    return cutoff_score

# 입력 받기
N, k = map(int, input().split())
scores = list(map(int, input().split()))

# 커트라인 점수 계산
cutoff_score = find_cutoff_score(N, k, scores)

# 결과 출력
print(cutoff_score)
"""
1. 입력 받기:
N과 k를 입력받고, 각 학생의 점수를 리스트 scores에 저장합니다.
2. 점수 정렬:
scores 리스트를 내림차순으로 정렬합니다.
3. 커트라인 점수 찾기:
내림차순으로 정렬된 리스트에서 k번째 점수를 커트라인 점수로 설정합니다.
인덱스는 0부터 시작하므로 k-1 위치의 점수를 가져옵니다.
"""





import sys
input = sys.stdin.read

def main():
    data = input().split()
    
    N = int(data[0])
    max_value = 10000
    count = [0] * (max_value + 1)
    
    for i in range(1, N + 1):
        number = int(data[i])
        count[number] += 1
    
    for number in range(max_value + 1):
        if count[number] > 0:
            for _ in range(count[number]):
                print(number)

if __name__ == "__main__":
    main()

"""
인덱스가 0에서 max_value까지 포함되도록 배열의 크기를 max_value + 1로 설정해야 합니다.
범위 포함: 문제에서 주어진 수는 1부터 max_value(10,000)까지의 자연수입니다. 즉, 1부터 10,000까지의 수를 모두 포함하기 위해서는 인덱스 0부터 10,000까지 접근할 수 있어야 합니다.
예를 들어, max_value가 10,000이라면:

인덱스 0부터 10,000까지 총 10,001개의 요소가 필요합니다.
이 때문에 count 배열의 크기를 max_value + 1로 설정하여 모든 인덱스에 접근할 수 있도록 합니다.

※ count[number + 1]가 아니라 count[number]가 맞습니다.
"""




def sort_digits_descending(N):
    # 문자열로 변환 후, 리스트로 변환
    digits = list(str(N))
    # 내림차순 정렬
    digits.sort(reverse=True)
    # 리스트를 다시 문자열로 합침
    sorted_number = ''.join(digits)
    return sorted_number

# 입력 받기
N = input().strip()

# 자리수를 내림차순으로 정렬한 수를 출력
print(sort_digits_descending(N))

def sort_digits_descending(n):
    digits = []

    # 각 자리수를 추출하여 리스트에 저장
    while n > 0:
        digits.append(n % 10)
        n = n // 10

    # 내림차순으로 정렬
    digits.sort(reverse=True)

    # 정렬된 리스트를 이용하여 숫자를 다시 만듦
    sorted_number = 0
    for digit in digits:
        sorted_number = sorted_number * 10 + digit

    return sorted_number

# 입력 받기
n = int(input().strip())

# 자리수를 내림차순으로 정렬한 수를 출력
print(sort_digits_descending(n))
"""
while문은 n이 0이 될 때까지 반복됩니다.
"""




import sys
input = sys.stdin.read

def main():
    data = input().split()
    N = int(data[0])
    points = []

    index = 1
    for _ in range(N):
        x = int(data[index])
        y = int(data[index + 1])
        points.append((x, y))
        index += 2

    # 정렬
    points.sort()

    # 결과 출력
    for x, y in points:
        print(x, y)

if __name__ == "__main__":
    main()
"""
1. 입력 받기:
sys.stdin.read를 사용하여 모든 입력을 한 번에 읽어옵니다.
첫 번째 값은 점의 개수 N입니다.
그 다음부터 각 점의 좌표 (xi, yi)가 주어집니다.

2. 점 리스트 생성:
points 리스트에 각 점의 좌표를 튜플 (x, y) 형태로 저장합니다.

3. sorted() 함수는 기본적으로 튜플의 첫 번째 요소를 기준으로 정렬하고, 첫 번째 요소가 같으면 두 번째 요소를 기준으로 정렬합니다.

4. data = input().split() 코드를 실행하면 data는 문자열을 공백을 기준으로 나눈 리스트가 됩니다.
이를 통해 입력된 모든 값을 리스트로 변환하고, 각 요소에 접근하여 처리할 수 있습니다.
"""





    # y좌표가 증가하는 순으로, y좌표가 같으면 x좌표가 증가하는 순으로 정렬
    points.sort(key=lambda point: (point[1], point[0]))

    # 결과 출력
    for x, y in points:
        print(x, y)

if __name__ == "__main__":
    main()
"""
key=lambda point: (point[1], point[0])는 각 점의 정렬 기준을 정의하는 부분입니다.
 - key 매개변수는 하나의 인수를 받아서 정렬 기준으로 사용할 값을 반환하는 함수가 될 수 있습니다.
 - lambda 함수는 Python에서 익명 함수를 만드는 방법입니다. lambda 키워드를 사용하여 간단한 함수를 한 줄로 정의할 수 있습니다. 구문은 다음과 같습니다:
    ㄴ lambda arguments: expression

    lambda 구문에서 arguments는 함수가 받는 인수를, expression은 그 인수들을 사용하여 계산할 표현식을 의미합니다.

# 두 수의 합을 반환하는 lambda 함수
add = lambda x, y: x + y
result = add(2, 3)
print(result)  # 출력: 5

# 리스트의 각 요소를 제곱하는 lambda 함수와 map 사용
numbers = [1, 2, 3, 4, 5]
squared = map(lambda x: x ** 2, numbers)
print(list(squared))  # 출력: [1, 4, 9, 16, 25]

# 정렬 시 key 매개변수에 사용
points = [(1, 2), (3, 1), (5, 7), (2, 3)]
sorted_points = sorted(points, key=lambda point: point[1])
print(sorted_points)  # 출력: [(3, 1), (1, 2), (2, 3), (5, 7)]

point는 points 리스트의 각 요소를 나타냅니다. 여기서 point는 (x, y) 형식의 튜플입니다.
(point[1], point[0])는 각 점을 (y, x) 순서의 튜플로 변환합니다.

1. 먼저 각 점의 y좌표를 기준으로 오름차순 정렬합니다.
2. 만약 두 점의 y좌표가 같다면, x좌표를 기준으로 오름차순 정렬합니다.
"""




import sys
input = sys.stdin.read

def main():
    data = input().split()
    N = int(data[0])
    words = set(data[1:N+1])  # 중복 제거
    
    # 리스트로 변환하여 정렬
    sorted_words = sorted(words, key=lambda word: (len(word), word))
    
    # 결과 출력
    for word in sorted_words:
        print(word)

if __name__ == "__main__":
    main()
"""
1. set을 사용하여 중복된 단어들을 제거합니다.
2. sorted() 함수를 사용하여 단어들을 정렬합니다.
정렬 기준으로 lambda word: (len(word), word)를 사용하여 먼저 길이를 기준으로 정렬하고, 길이가 같으면 사전 순으로 정렬합니다.




import sys
input = sys.stdin.read

def main():
    data = input().splitlines()
    N = int(data[0])
    
    members = []
    for i in range(1, N + 1):
        age, name = data[i].split()
        members.append((int(age), name))
    
    # 나이 순으로 정렬, 나이가 같으면 입력 순서 유지
    sorted_members = sorted(members, key=lambda member: member[0])
    
    # 결과 출력
    for age, name in sorted_members:
        print(age, name)

if __name__ == "__main__":
    main()
"""





import sys
input = sys.stdin.read

def coordinate_compression(coords):
    sorted_unique_coords = sorted(set(coords))
    coord_map = {coord: index for index, coord in enumerate(sorted_unique_coords)}
    return [coord_map[coord] for coord in coords]

def main():
    data = input().split()
    N = int(data[0])
    coords = list(map(int, data[1:]))
    
    compressed_coords = coordinate_compression(coords)
    
    print(" ".join(map(str, compressed_coords)))

if __name__ == "__main__":
    main()

"""
단일 따옴표로 감싸기: 'example'
이중 따옴표로 감싸기: "example"
이 두 가지 방법은 동일하게 작동하며, 주로 스타일이나 가독성의 차이로 선택합니다.
"""




import sys
input = sys.stdin.read

def coordinate_compression(coords):
    sorted_unique_coords = sorted(set(coords))
    coord_map = {coord: index for index, coord in enumerate(sorted_unique_coords)}
    return [coord_map[coord] for coord in coords]

def main():
    data = input().split()
    N = int(data[0])
    coords = list(map(int, data[1:]))
    
    compressed_coords = coordinate_compression(coords)
    
    print(" ".join(map(str, compressed_coords))) # (***)

if __name__ == "__main__":
    main()
"""
1. sorted_unique_coords를 set으로 변환한 후 다시 리스트로 변환하는 이유는 중복을 제거하고 정렬하기 위함입니다.
   coord_map은 이 정렬된 좌표를 인덱스로 사용하여 압축된 값을 매핑하는 데 필요합니다.
2. coord_map의 자료형은 딕셔너리입니다. coord_map 딕셔너리는 각 원래 좌표 값을 압축된 인덱스 값으로 '매핑'합니다.
3. 예제 입력
2 4 -10 4 -9 >>> coord_map = {-10: 0, -9: 1, 2: 2, 4: 3}
4. (***)를 print(*compressed_coords)로 대체할 수 있다.
"""
