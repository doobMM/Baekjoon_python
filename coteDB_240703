"""
바구니 공 스와핑
"""
# 입력을 받습니다.
N, M = map(int, input().split())
baskets = list(range(1, N + 1))

for _ in range(M):
    i, j = map(int, input().split())
    # i번 바구니와 j번 바구니에 있는 공을 교환합니다.
    baskets[i-1], baskets[j-1] = baskets[j-1], baskets[i-1]

# 최종 결과를 출력합니다.
print(' '.join(map(str, baskets)))



"""
과제 제출 안 한 놈 둘
"""
# Version 1
# 1부터 30까지의 출석번호를 리스트로 초기화합니다.
all_students = list(range(1, 31))

# 28명의 제출자 출석번호를 입력받습니다.
for _ in range(28):
    submitted_student = int(input())
    all_students.remove(submitted_student)

# 남아 있는 출석번호를 정렬합니다.
all_students.sort()

# 제출하지 않은 학생의 출석번호를 출력합니다.
print(all_students[0])
print(all_students[1])


#Version 2
# 1부터 30까지의 모든 출석번호 리스트 생성
all_students = set(range(1, 31))

# 제출된 출석번호 입력받기
for _ in range(28):
    submitted = int(input().strip())
    all_students.remove(submitted)

# 남은 두 개의 출석번호를 오름차순으로 정렬하여 출력
missing_students = sorted(all_students)
print(missing_students[0])
print(missing_students[1])

"""
# set함수 사용법
# 집합 생성
numbers = set([1, 2, 3, 4, 5])
print(numbers)  # {1, 2, 3, 4, 5}

# 요소 추가
numbers.add(6)
print(numbers)  # {1, 2, 3, 4, 5, 6}

# 요소 제거
numbers.remove(3)
print(numbers)  # {1, 2, 4, 5, 6}

# 요소 존재 여부 확인
print(4 in numbers)  # True
print(3 in numbers)  # False

# strip() 사용 이유
# 공백이 있는 입력을 처리하는 경우
raw_input = "  42  "
clean_input = raw_input.strip()  # "42"
number = int(clean_input)  # 42
print(number)  # 출력: 42
"""



# 빈 집합 생성
remainders = set()

# 10개의 수를 입력받아 42로 나눈 나머지를 집합에 추가
for _ in range(10):
    number = int(input().strip())
    remainders.add(number % 42)

# 집합의 크기를 출력
print(len(remainders))



# 바구니 순서 바꾸기
# 입력을 받습니다.
N, M = map(int, input().split())
baskets = list(range(1, N + 1))

# M번의 명령을 처리합니다.
for _ in range(M):
    i, j = map(int, input().split())
    # i번 바구니부터 j번 바구니까지 역순으로 바꿉니다.
    baskets[i-1:j] = baskets[i-1:j][::-1]

# 최종 결과를 출력합니다.
print(' '.join(map(str, baskets)))
"""
[::-1]은 리스트를 역순으로 만드는 슬라이싱 기법입니다. 이를 사용하면 추출된 부분 리스트의 순서를 반대로 뒤집습니다.
"""



# 성적 조작
# 입력을 받습니다.
N = int(input())
scores = list(map(int, input().split()))

# 최댓값을 찾습니다.
M = max(scores)

# 새로운 성적 리스트를 계산합니다.
new_scores = [(score / M) * 100 for score in scores]

# 새로운 평균을 계산합니다.
new_average = sum(new_scores) / N

# 평균을 출력합니다.
print(new_average)




# 고양이 됐거든 내 정신은
print("\\    /\\")
print(" )  ( ')")
print("(  /  )")
print(" \\(__)|")



"""
문자열
"""
# 입력을 받습니다.
S = input().strip()
i = int(input().strip())

# S의 i번째 글자를 출력합니다. (파이썬의 인덱스는 0부터 시작하므로 i-1로 접근)
print(S[i - 1])




# 단어 길이 입출력
# 단어를 입력받습니다.
word = input().strip()

# 단어의 길이를 계산합니다.
length_of_word = len(word)

# 단어의 길이를 출력합니다.
print(length_of_word)
"""
위 코드에서 word의 자료형은 str입니다. input() 함수는 사용자로부터 입력받은 값을 항상 문자열(str)로 반환합니다. 따라서 word 변수는 문자열 자료형을 갖게 됩니다.
"""


# 처음과 마지막은 항상 중요하지
# 입력을 받습니다.
T = int(input().strip())

# 각 테스트 케이스에 대해 처리합니다.
for _ in range(T):
    string = input().strip()
    # 문자열의 첫 글자와 마지막 글자를 추출하여 연속하여 출력합니다.
    print(string[0] + string[-1])


# 아스키 코드 계산
# 문자 하나를 입력받습니다.
char = input().strip()

# 입력받은 문자의 아스키 코드 값을 계산합니다.
ascii_value = ord(char)

# 아스키 코드 값을 출력합니다.
print(ascii_value)




# 띄어씌기없이쓰는게사랑인것같애
# 숫자의 개수를 입력받습니다.
N = int(input().strip())

# 공백 없이 쓰여진 N개의 숫자를 입력받습니다.
numbers = input().strip()

# 숫자들의 합을 계산합니다.
total_sum = sum(int(char) for char in numbers)

# 합을 출력합니다.
print(total_sum)





# 첫경험은 중요하지
# 단어를 입력받습니다.
S = input().strip()

# 알파벳 소문자의 위치를 저장할 리스트를 초기화합니다.
positions = [-1] * 26

# 각 문자의 처음 등장하는 위치를 찾습니다.
# 조건문 : 문자의 위치 계산, 첫 등장 여부 확인, 위치 업데이트
for idx, char in enumerate(S):
    if positions[ord(char) - ord('a')] == -1: 
        positions[ord(char) - ord('a')] = idx

# 결과를 출력합니다.
print(' '.join(map(str, positions)))
"""
# 문자열 'S'를 입력받습니다.
S = "baekjoon"

# enumerate 함수를 사용하여 문자열을 순회합니다.
for idx, char in enumerate(S):
    print(f"Index: {idx}, Character: {char}")
"""



# 반복 후 먹뱉
# 테스트 케이스의 개수를 입력받습니다.
T = int(input().strip())

# 각 테스트 케이스를 처리합니다.
for _ in range(T):
    # 반복 횟수 R과 문자열 S를 입력받습니다.
    R, S = input().split()
    R = int(R)
    
    # 문자열 S의 각 문자를 R번 반복하여 새 문자열 P를 만듭니다.
    P = ''.join(char * R for char in S)
    
    # 새 문자열 P를 출력합니다.
    print(P)



# 공백 인식
# 문자열을 입력받습니다.
input_string = input().strip()

# 문자열을 공백으로 분리하여 단어 리스트를 만듭니다.
# split() 메서드는 문자열의 앞뒤 공백도 자동으로 처리합니다.
words = input_string.split()

# 단어 리스트의 길이를 출력합니다.
print(len(words))



# 뒤집어~
# 두 수 A와 B를 입력받습니다.
A, B = input().split()

# 각 수를 문자열로 변환한 후 뒤집습니다.
reversed_A = A[::-1]
reversed_B = B[::-1]

# 뒤집은 수들을 정수로 변환하여 크기를 비교합니다.
reversed_A_int = int(reversed_A)
reversed_B_int = int(reversed_B)

# 더 큰 수를 출력합니다.
print(max(reversed_A_int, reversed_B_int))



# dictionary 
# Version 1
# 알파벳을 숫자에 매핑하는 딕셔너리
dial = {
    'A': 2, 'B': 2, 'C': 2,
    'D': 3, 'E': 3, 'F': 3,
    'G': 4, 'H': 4, 'I': 4,
    'J': 5, 'K': 5, 'L': 5,
    'M': 6, 'N': 6, 'O': 6,
    'P': 7, 'Q': 7, 'R': 7, 'S': 7,
    'T': 8, 'U': 8, 'V': 8,
    'W': 9, 'X': 9, 'Y': 9, 'Z': 9
}

# 단어를 입력받습니다.
word = input().strip()

# 다이얼을 걸기 위해 필요한 시간을 계산합니다.
total_time = 0
for char in word:
    total_time += dial[char] + 1  # 해당 숫자를 걸기 위해 필요한 시간은 숫자 + 1초

# 결과를 출력합니다.
print(total_time)

"""
numbers_dict = {1: 'a', 2: 'b', 3: 'c'}
max_in_dict_keys = max(numbers_dict)
print(f"Max in dict keys: {max_in_dict_keys}")  # 출력: Max in dict keys: 3
"""

# Version 2
# 각 숫자에 해당하는 알파벳 문자열을 정의합니다.
dial_mapping = {
    2: 'ABC',
    3: 'DEF',
    4: 'GHI',
    5: 'JKL',
    6: 'MNO',
    7: 'PQRS',
    8: 'TUV',
    9: 'WXYZ'
}

# 알파벳을 숫자에 매핑하는 딕셔너리를 생성합니다.
dial = {}
for number, letters in dial_mapping.items():
    for letter in letters:
        dial[letter] = number

# 단어를 입력받습니다.
word = input().strip()

# 다이얼을 걸기 위해 필요한 시간을 계산합니다.
total_time = 0
for char in word:
    total_time += dial[char] + 1  # 해당 숫자를 걸기 위해 필요한 시간은 숫자 + 1초

# 결과를 출력합니다.
print(total_time)





# 여러 줄 그대로 입출력
import sys

# 표준 입력으로부터 여러 줄의 입력을 받습니다.
input_lines = sys.stdin.read().strip().split('\n')

# 입력받은 줄들을 그대로 출력합니다.
for line in input_lines:
    print(line)
"""
 sys.stdin을 사용하여 여러 줄의 입력을 받을 수 있습니다.
print(input_lines)를 실행하면 
['Hello', 'Baekjoon', 'Online Judge']
로 나온다. print(input_lines)는
리스트 자체를 출력하므로 리스트의 형태가 그대로 출력됩니다. 
"""







# 새싹 출력하기
print('''         ,r'"7
r`-_   ,'  ,/
 \. ". L_r'
   `~\\/
      |
      |''')
# '''로 시작과 끝 맺기, 4째 줄의 \\는 \ 하나 출력하기 위함.





# 체스
# list 2개 엮어서 zip으로 만들기
# 올바른 체스 피스의 개수를 리스트로 정의합니다.
correct_counts = [1, 1, 2, 2, 2, 8]

# 현재 피스의 개수를 입력받습니다.
current_counts = list(map(int, input().split()))

# 각 피스에 대해 필요한 개수(더하거나 빼야 할 개수)를 계산합니다.
result = [correct - current for correct, current in zip(correct_counts, current_counts)]

# 결과를 출력합니다.
print(' '.join(map(str, result)))
"""
 zip을 사용한 이유는 두 리스트(correct_counts와 current_counts)를 병렬로 순회하며 각 요소를 튜플로 묶어 처리하기 위함입니다. 이를 통해 올바른 개수와 현재 개수를 동시에 접근할 수 있습니다.
zip 함수는 두 개 이상의 iterable(예: 리스트, 튜플 등)을 병렬로 순회하면서 각 iterable의 요소를 튜플로 묶어주는 함수입니다. zip을 사용하면 여러 리스트의 요소를 하나씩 묶어서 처리할 수 있습니다.
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']

for item1, item2 in zip(list1, list2):
    print(item1, item2)
>>> 
1 a
2 b
3 c
"""






# super star
# N을 입력받습니다.
N = int(input().strip())

# 첫 번째 부분: 증가하는 부분
for i in range(1, N + 1):
    spaces = ' ' * (N - i)
    stars = '*' * (2 * i - 1)
    print(spaces + stars)

# 두 번째 부분: 감소하는 부분
for i in range(N - 1, 0, -1):
    spaces = ' ' * (N - i)
    stars = '*' * (2 * i - 1)
    print(spaces + stars)
"""
-1은 스텝 값을 의미하며, 각 단계에서 값이 얼마나 증가하거나 감소하는지를 나타냅니다. 여기서는 각 단계에서 1씩 감소합니다.
"""




# TENET
# 단어를 입력받습니다.
word = input().strip()

# 단어를 거꾸로 뒤집습니다.
reversed_word = word[::-1]

# 원래 단어와 뒤집힌 단어를 비교하여 팰린드롬인지 확인합니다.
if word == reversed_word:
    print(1)  # 팰린드롬이면 1을 출력합니다.
else:
    print(0)  # 팰린드롬이 아니면 0을 출력합니다.





# 최빈알파벳 in 입력단어 분
from collections import Counter

# 단어를 입력받습니다.
word = input().strip().upper()  # 대소문자를 구분하지 않으므로 모두 대문자로 변환

# 각 알파벳의 빈도수를 셉니다.
counter = Counter(word)

# 가장 많이 사용된 알파벳의 빈도를 찾습니다.
max_count = max(counter.values())

# 가장 많이 사용된 알파벳을 찾습니다.
most_common = [char for char, count in counter.items() if count == max_count]

# 결과를 출력합니다.
if len(most_common) > 1:
    print('?')  # 가장 많이 사용된 알파벳이 여러 개 있는 경우
else:
    print(most_common[0])  # 가장 많이 사용된 알파벳을 출력
"""
 Counter는 Python의 collections 모듈에 있는 클래스이며, 요소의 빈도수를 계산하고 저장하는 딕셔너리와 유사한 객체입니다.
word = "Mississipi".strip().upper()  # "MISSISSIPI"
counter = Counter(word)
print(counter)
>>> Counter({'I': 4, 'S': 4, 'M': 1, 'P': 1})




# 크로아티아 알파벳
def count_croatian_alphabets(word):
    croatian_alphabets = ["c=", "c-", "dz=", "d-", "lj", "nj", "s=", "z="]
    count = 0
    i = 0

    while i < len(word):
        if word[i:i+3] in croatian_alphabets:
            count += 1
            i += 3
        elif word[i:i+2] in croatian_alphabets:
            count += 1
            i += 2
        else:
            count += 1
            i += 1

    return count

# 입력을 받습니다.
word = input().strip()
# 결과를 출력합니다.
print(count_croatian_alphabets(word))

"""
word[i:i+3]과 word[i:i+2]을 통해 각각 3글자와 2글자 크로아티아 알파벳을 먼저 확인하고, 맞는 경우 인덱스를 그만큼 이동시킵니다. 
"""




# 그룹 단어인지 확인하는 함수
def is_group_word(word):
    seen = set()
    previous_char = ''
    for char in word:
        if char != previous_char:
            if char in seen:
                return False
            seen.add(char)
            previous_char = char
    return True

# 입력을 받습니다.
N = int(input().strip())
words = [input().strip() for _ in range(N)]

# 그룹 단어의 개수를 셉니다.
group_word_count = sum(1 for word in words if is_group_word(word))

# 결과를 출력합니다.
print(group_word_count)

"""
그룹 단어를 확인하는 방법:
단어를 순회하면서 이전 문자와 현재 문자가 같은지 확인합니다.
만약 이전 문자와 현재 문자가 다르고, 현재 문자가 이미 등장한 적이 있다면 그룹 단어가 아닙니다.
그렇지 않으면 그룹 단어입니다.
>>> is_group_word 자체는 T/F 만을 반환하고
     그 함수를 이용해 T일 때, 1을 더하는 sum함수를 이용해 group_word_count를 정의한다
"""




# 전공평점 계산기
def calculate_major_gpa(subjects):
    grade_to_score = {
        'A+': 4.5,
        'A0': 4.0,
        'B+': 3.5,
        'B0': 3.0,
        'C+': 2.5,
        'C0': 2.0,
        'D+': 1.5,
        'D0': 1.0,
        'F': 0.0,
        'P': None  # P는 계산에서 제외
    }

    total_score = 0.0
    total_credits = 0.0

    for subject in subjects:
        name, credit, grade = subject.split()
        credit = float(credit)
        
        if grade == 'P':
            continue
        
        total_score += credit * grade_to_score[grade]
        total_credits += credit

    if total_credits == 0:
        return 0.0

    gpa = total_score / total_credits
    return gpa

# 입력을 받습니다.
subjects = []
for _ in range(20):
    subjects.append(input().strip())

# 결과를 계산하고 출력합니다.
gpa = calculate_major_gpa(subjects)
print(f"{gpa:.6f}")

"""
1. set에는 add() 메서드를 사용하고, list에는 append() 메서드를 사용합니다.
2. credit은 문자열로 저장되므로 학점을 실수형으로 변환하기 위해 credit = float(credit)를 수행한다.
3. 입력을 받을 때 자동으로 각 줄마다 줄바꿈이 됩니다.
4. 'f' 문자열 포매팅을 사용하여 gpa 변수를 포맷하고, .6f는 소수점 아래 여섯 자리까지 출력하도록 지정합니다.
5. ValueError가 발생하는 이유??????????????? : 
print(f"{gpa:.6f}")를 사용하지 않으면, gpa 변수가 계산되지 않거나 올바르게 형변환되지 않았기 때문일 가능성이 있습니다. 
특히, total_credits가 0일 때 나눗셈을 수행하지 않도록 하는 보호 코드가 필요합니다.
"""








# 2차원 배열
# 입력을 받습니다.
N, M = map(int, input().split())

# 행렬 A를 입력받아 2차원 리스트로 저장합니다.
A = []
for _ in range(N):
    A.append(list(map(int, input().split())))

# 행렬 B를 입력받아 2차원 리스트로 저장합니다.
B = []
for _ in range(N):
    B.append(list(map(int, input().split())))

# 행렬 A와 B를 더하여 새로운 행렬 C를 생성합니다.
C = []
for i in range(N):
    row = []
    for j in range(M):
        row.append(A[i][j] + B[i][j])
    C.append(row)

# 새로운 행렬 C를 출력합니다.
for row in C:
    print(' '.join(map(str, row)))

"""
1. 아래를 입력받았을 때
1 1 1
2 2 2
0 1 0 를
그냥 print(A)하면 [[1, 1, 1], [2, 2, 2], [0, 1, 0]]
2. row 리스트의 j번째 위치에 A[i][j] + B[i][j] 값이 저장됩니다.
3. 요소 사이에 공백을 두고 출력하기 위해 ' '를 사용합니다.
4. map(int, row)로 하면 row의 각 요소가 정수로 변환되는데, 이는 join 메서드와 호환되지 않습니다.
  join 메서드를 사용하여 리스트의 요소를 결합하려면 map(str, row)를 사용해야 합니다.
"""






# 2차원 배열 최댓값 탐색
# 9x9 격자판 입력 받기
matrix = [list(map(int, input().split())) for _ in range(9)]

# 최댓값 및 위치 초기화
max_value = -1
max_position = (0, 0)

# 격자판 순회하며 최댓값 및 위치 찾기
for i in range(9):
    for j in range(9):
        if matrix[i][j] > max_value:
            max_value = matrix[i][j]
            max_position = (i + 1, j + 1)  # 행과 열 번호는 1부터 시작

# 최댓값 출력
print(max_value)
# 최댓값 위치 출력
print(max_position[0], max_position[1])

"""
1. max_position의 자료형은 튜플(tuple)입니다.
2. 튜플의 값을 꺼낼 때도 [] 안에 인덱스를 사용합니다.
"""



# 가로세로 변환
# 5개의 문자열 입력받기
words = [input().strip() for _ in range(5)]

# 최대 길이는 15로 고정
max_length = 15

# 결과를 저장할 리스트
result = []

# 세로로 읽기
for i in range(max_length):
    for word in words:
        if i < len(word): # i < len(word)가 성립하지 않는 경우 result.append(word[i])가 실행되지 않아서 빈칸 없이 글자를 세로로 읽을 수 있습니다.
            result.append(word[i])

# 결과 출력
print("".join(result))




# 도화지 색종이 검은 영역 계산
def calculate_black_area(papers):
    # 100x100 도화지를 2차원 배열로 초기화
    canvas = [[0] * 100 for _ in range(100)]
    
    # 각 색종이의 위치를 도화지에 표시
    for x, y in papers:
        for i in range(x, x + 10):
            for j in range(y, y + 10):
                canvas[i][j] = 1
    
    # 색종이가 붙은 영역의 넓이 계산
    black_area = sum(sum(row) for row in canvas)
    return black_area

# 입력을 받습니다.
num_papers = int(input())
papers = [tuple(map(int, input().split())) for _ in range(num_papers)]

# 결과를 계산하고 출력합니다.
black_area = calculate_black_area(papers)
print(black_area)
"""
    # Print the row sums for debugging
    row_sums = [sum(row) for row in canvas]
    for idx, row_sum in enumerate(row_sums):
        print(f"Row {idx}: {row_sum}")
>>>
Row 0: 0
Row 1: 0
Row 2: 0
Row 3: 10
Row 4: 10
Row 5: 15
Row 6: 15
Row 7: 15
Row 8: 15
Row 9: 15
Row 10: 15
Row 11: 15
Row 12: 15
Row 13: 10
...
Row 99: 0
Total Black Area: 260
시계방향으로 90도 돌리면 row가 위에서 아래로, column이 왼쪽에서 오른쪽으로 증가하는 방식으로 볼 수 있습니다.
"""
