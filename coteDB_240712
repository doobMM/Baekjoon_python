from collections import deque

def last_card(N):
    # 큐 초기화 및 카드 넣기
    queue = deque(range(1, N + 1))
    
    # 카드가 한 장 남을 때까지 반복
    while len(queue) > 1:
        queue.popleft()      # 제일 위에 있는 카드를 버림
        queue.append(queue.popleft())  # 제일 위에 있는 카드를 제일 아래로 이동
    
    # 마지막으로 남은 카드 출력
    return queue[0]

# 입력 받기
N = int(input().strip())
print(last_card(N))

"""
1. queue.popleft() 메서드는 제일 위에 있는 카드를 큐에서 제거하면서 그 카드를 반환합니다. 
2. deque는 range뿐만 아니라 list도 인수로 받을 수 있습니다. deque는 iterable한 객체라면 무엇이든 인수로 받을 수 있습니다
"""





def josephus_sequence(N, K):
    people = list(range(1, N + 1))  # 1부터 N까지의 사람들
    result = []  # 요세푸스 순열을 저장할 리스트
    index = 0  # 시작 인덱스

    while people:
        index = (index + K - 1) % len(people)  # 제거할 사람의 인덱스 계산(*)
        result.append(people.pop(index))  # 제거된 사람을 결과 리스트에 추가

    return result

# 입력 받기
N, K = map(int, input().strip().split())
result = josephus_sequence(N, K)
print("<" + ", ".join(map(str, result)) + ">")

"""
1. pop 메서드는 지정된 인덱스의 요소를 반환하고, 동시에 그 요소를 리스트에서 제거합니다.
2. 위 식(*)은 현재 인덱스에서 K번째 사람의 위치를 계산하고, 리스트의 길이를 넘지 않도록 하기 위해 모듈러 연산 (%)을 사용합니다. 
"""





from collections import deque
import sys
input = sys.stdin.read

def process_commands(commands):
    deq = deque()
    results = []
    for command in commands:
        if command[0] == '1':
            deq.appendleft(int(command[2:]))
        elif command[0] == '2':
            deq.append(int(command[2:]))
        elif command[0] == '3':
            if deq:
                results.append(deq.popleft())
            else:
                results.append(-1)
        elif command[0] == '4':
            if deq:
                results.append(deq.pop())
            else:
                results.append(-1)
        elif command[0] == '5':
            results.append(len(deq))
        elif command[0] == '6':
            results.append(1 if not deq else 0)
        elif command[0] == '7':
            if deq:
                results.append(deq[0])
            else:
                results.append(-1)
        elif command[0] == '8':
            if deq:
                results.append(deq[-1])
            else:
                results.append(-1)
    return results

# 입력 받기
input_data = input().strip().split('\n')
N = int(input_data[0])
commands = input_data[1:]

# 명령 처리 및 결과 출력
results = process_commands(commands)
for result in results:
    print(result)

"""
1. deq = deque()는 덱(deque) 객체를 초기화하는 역할을 합니다. 이를 통해 deq라는 이름의 비어 있는 덱을 생성합니다. 이 덱을 사용하여 앞으로 주어진 명령을 처리할 수 있습니다.
2. append와 pop 메서드는 기본적으로 덱의 가장 뒤쪽에 있는 요소에 대해 수행됩니다. 그래서 덱의 앞쪽에 요소를 추가하거나 제거할 때는 appendleft와 popleft 메서드를 사용합니다. 
3. command[2]를 사용하는 대신 command[2:]를 사용하는 이유는 숫자가 한 자리 숫자일 때는 문제가 없지만, 두 자리 이상의 숫자를 처리할 때 필요하기 때문입니다. 
"""





from collections import deque

def balloon_pop_order(N, balloon_values):
    balloons = deque(enumerate(balloon_values, 1))  # (풍선 번호, 종이 값) 쌍으로 묶기
    result = []

    while balloons:
        idx, val = balloons.popleft()  # 풍선 터뜨리기
        result.append(idx)
        
        if balloons:
            # 이동할 값에 따라 deque를 회전시킴
            if val > 0:
                balloons.rotate(-(val - 1))  # 양수인 경우 오른쪽으로 회전
            else:
                balloons.rotate(-val)  # 음수인 경우 왼쪽으로 회전

    return result

# 입력 받기
N = int(input().strip())
balloon_values = list(map(int, input().strip().split()))

# 결과 계산 및 출력
result = balloon_pop_order(N, balloon_values)
print(" ".join(map(str, result)))

"""
1. 예제 입력이 5와 3 2 1 -3 -1일 경우 :
balloon_values = [3, 2, 1, -3, -1] / 
enumerate(balloon_values, 1) = (1, 3), (2, 2), (3, 1), (4, -3), (5, -1) # balloon_values 리스트의 각 요소에 대해 1부터 시작하는 인덱스를 부여하는 함수 /
balloon = deque([(1, 3), (2, 2), (3, 1), (4, -3), (5, -1)]) #  각 풍선의 번호와 그 안에 적힌 값을 쌍으로 가지는 deque 객체

2. while문을 1번만 실행할 때
deque([(2, 2), (3, 1), (4, -3), (5, -1)])에서 balloons.rotate(-(val - 1))이므로        # 여기서 val은 3, 따라서 rotate(-2)
오른쪽으로 2번 회전시키면, balloons의 상태는 deque([(4, -3), (5, -1), (2, 2), (3, 1)])

3. rotate는 기본적으로 양의 인수에 대해 반시계방향이라고 생각하면 된다.
"""






from collections import deque
import sys
input = sys.stdin.read

def queuestack_simulation(N, A, B, M, C):
    # 각 자료구조를 초기화
    data_structures = []
    for i in range(N):
        if A[i] == 0:  # 큐인 경우
            dq = deque()
            dq.append(B[i])
            data_structures.append(dq)
        else:  # 스택인 경우
            stk = [B[i]]
            data_structures.append(stk)
    
    results = []
    
    for x in C:
        current = x
        for i in range(N):
            if A[i] == 0:  # 큐인 경우에만 처리
                data_structures[i].append(current)
                current = data_structures[i].popleft()
        results.append(current)
    
    return results

# 입력 처리
data = input().split()
N = int(data[0])
A = list(map(int, data[1:N+1]))
B = list(map(int, data[N+1:2*N+1]))
M = int(data[2*N+1])
C = list(map(int, data[2*N+2:]))

# 함수 호출 및 결과 출력
results = queuestack_simulation(N, A, B, M, C)
print(" ".join(map(str, results)))

"""
간단하게 한 버전
"""
import sys
input = sys.stdin.read

def queuestack_simulation(N, A, B, M, C):
    # 각 자료구조를 초기화
    data_structures = [[B[i]] for i in range(N)]
    
    results = []
    
    for x in C:
        current = x
        for i in range(N):
            if A[i] == 0:  # 큐인 경우에만 처리
                data_structures[i].append(current)
                current = data_structures[i].pop(0)  # 큐에서는 앞의 요소를 제거
        results.append(current)
    
    return results

# 입력 처리
data = input().split()
N = int(data[0])
A = list(map(int, data[1:N+1]))
B = list(map(int, data[N+1:2*N+1]))
M = int(data[2*N+1])
C = list(map(int, data[2*N+2:]))

# 함수 호출 및 결과 출력
results = queuestack_simulation(N, A, B, M, C)
print(" ".join(map(str, results)))

"""
☆☆☆ 시간초과로 계속 나가리 ☆☆☆
"""





def green_tower_paths(N):
    # Dynamic Programming table to store the number of ways to reach each block
    dp = [[0] * (i + 1) for i in range(N + 1)]
    
    # The top of the tower has one way to start
    dp[0] = [1]
    
    # Fill the DP table
    for i in range(1, N + 1):
        for j in range(i + 1):
            if j == 0:
                dp[i][j] = dp[i - 1][j]
            elif j == i:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]
    
    # The total number of ways to reach the bottom layer is the sum of the ways to reach each block in the bottom layer
    return sum(dp[N])

# Example
N = int(input().strip())
print(green_tower_paths(N))

"""
1. 
dp = [
    [0],       # dp[0] - 0번째 층
    [0, 0],    # dp[1] - 1번째 층
    [0, 0, 0], # dp[2] - 2번째 층
    [0, 0, 0, 0]  # dp[3] - 3번째 층
]
range(N+1)으로 초기화하는 이유는 dp 테이블이 0부터 N층까지의 경로 수를 저장해야 하기 때문입니다. N층까지 포함하기 위해서는 총 N+1개의 리스트가 필요합니다. 

2. 
(1) 
for i in range(1, N + 1): 1부터 N층까지 순회합니다.
i는 현재 층. 0번째 층은 이미 초기화됨
(2)
for j in range(i + 1): 각 층 i에서 0부터 i까지의 위치를 순회합니다.
j는 현재 층 i에서의 위치. 각 층 i는 i+1개의 블록을 가집니다
"""





def factorial(N):
    result = 1
    for i in range(2, N + 1):
        result *= i
    return result

# 입력 처리
N = int(input().strip())

# 팩토리얼 계산 및 결과 출력
print(factorial(N))

"""
range(2, 1), range(2, 2)는 빈 범위이므로 반복문이 실행되지 않습니다.
"""





# 다리 놓기

def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

def binomial_coefficient(M, N):
    return factorial(M) // (factorial(N) * factorial(M - N))

# 입력 처리
import sys
input = sys.stdin.read
data = input().split()

T = int(data[0])
index = 1

results = []

for _ in range(T):
    N = int(data[index])
    M = int(data[index + 1])
    index += 2
    results.append(binomial_coefficient(M, N))

# 결과 출력
for result in results:
    print(result)






# 진양철 말고 진약수
# 입력 처리
num_divisors = int(input().strip())
divisors = list(map(int, input().split()))

# N을 구하는 방법: 가장 큰 약수와 가장 작은 약수를 곱함
N = min(divisors) * max(divisors)

# 결과 출력
print(N)





def count_gomgom(N, records):
    count = 0
    user_set = set()
    
    for record in records:
        if record == "ENTER":
            user_set = set()  # 새로운 세트 시작
        elif record not in user_set:
            user_set.add(record)
            count += 1
    
    return count

# 입력 처리
N = int(input().strip())
records = [input().strip() for _ in range(N)]

# 결과 계산 및 출력
result = count_gomgom(N, records)
print(result)





def count_dancers(N, records):
    dancers = {"ChongChong"}  # 초기화: ChongChong만 무지개 댄스를 추고 있음
    
    for record in records:
        A, B = record.split()
        if A in dancers or B in dancers:
            dancers.add(A)  # A가 dancers에 추가됨
            dancers.add(B)  # B가 dancers에 추가됨
    
    return len(dancers)  # dancers의 크기를 반환하여 무지개 댄스를 추는 사람의 수를 구함

# 입력 처리
import sys
input = sys.stdin.read
data = input().splitlines()

N = int(data[0])
records = data[1:N + 1]

# 결과 계산 및 출력
result = count_dancers(N, records)
print(result)

"""
dancers 객체는  set 타입입니다.
"""





import sys
from collections import Counter

# 입력 처리
input = sys.stdin.read
data = input().split()
N = int(data[0])
numbers = list(map(int, data[1:]))

# 산술평균 계산
mean = round(sum(numbers) / N)

# 중앙값 계산
sorted_numbers = sorted(numbers)
median = sorted_numbers[N // 2]

# 최빈값 계산
counter = Counter(numbers)
most_common = counter.most_common()
# 빈도수 내림차순, 값 오름차순으로 정렬
most_common.sort(key=lambda x: (-x[1], x[0]))
if len(most_common) > 1 and most_common[0][1] == most_common[1][1]:
    mode = most_common[1][0]
else:
    mode = most_common[0][0]

# 범위 계산
range_value = max(numbers) - min(numbers)

# 결과 출력
print(mean)
print(median)
print(mode)
print(range_value)

"""
1. round 함수를 사용하여 소수점 첫째 자리에서 반올림합니다.
2. N은 홀수로만 주어진다.
3. most_common 메서드는 빈도수가 높은 순서대로 정렬된 리스트를 반환합니다. 이 리스트는 [(값, 빈도수), (값, 빈도수), ...] 형태입니다.
-x[1]: 빈도수를 기준으로 내림차순 정렬합니다 / x[0]: 값 자체를 기준으로 오름차순 정렬합니다.
4. 만약 최빈값이 여러 개일 경우 두 번째로 작은 값을 선택합니다 : most_common[0][1]과 most_common[1][1]이 같은지 확인하고, 같다면 두 번째 값을 선택합니다.
"""
